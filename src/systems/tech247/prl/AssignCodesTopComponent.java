/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.prl;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.RequestProcessor;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.WindowManager;
import systems.tech247.dbaccess.DataAccess;
import systems.tech247.hr.Currencies;
import systems.tech247.hr.Employees;
import systems.tech247.hr.TblPayrollCode;
import systems.tech247.hr.TblPayrollCodeGroups;
import systems.tech247.util.CetusUTL;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//systems.tech247.prl//AssignCodes//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "AssignCodesTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "systems.tech247.prl.AssignCodesTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AssignCodesAction",
        preferredID = "AssignCodesTopComponent"
)
@Messages({
    "CTL_AssignCodesAction=Assign Codes",
    "CTL_AssignCodesTopComponent=Assign Codes",
    "HINT_AssignCodesTopComponent="
})
public final class AssignCodesTopComponent extends TopComponent {
    
    Currencies selectedCurrency = DataAccess.getBaseCurrency();
    List<TblPayrollCode> group;
    BigDecimal amount = BigDecimal.ZERO;
    String message = null;
    List<Employees> empList = new ArrayList<>();
    

    

    TopComponent employeeselectorTC = WindowManager.getDefault().findTopComponent("PersonnelSelectorTopComponent");
    InstanceContent ic = new InstanceContent();
    
    public AssignCodesTopComponent(){
        
    }
    
    public AssignCodesTopComponent(List<TblPayrollCode> g) {
        initComponents();
        setName(Bundle.CTL_AssignCodesTopComponent());
        setToolTipText(Bundle.HINT_AssignCodesTopComponent());
        this.group = g;
        

        

        

        
        


    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbEmployeeSelector = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jbEmployeeSelector, org.openide.util.NbBundle.getMessage(AssignCodesTopComponent.class, "AssignCodesTopComponent.jbEmployeeSelector.text")); // NOI18N
        jbEmployeeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEmployeeSelectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbEmployeeSelector, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbEmployeeSelector)
                .addContainerGap(266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbEmployeeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEmployeeSelectorActionPerformed
        DataAccess.resetSelectedEmployees();
        
        DialogDisplayer.getDefault().notify(new DialogDescriptor(employeeselectorTC, "Select Employee(s)"));
        CetusUTL.loadSelectableEmployees("SELECT e FROM Employees e WHERE e.isDisengaged = 0",false);
        empList = DataAccess.getSelectedEmployees();
        modify();
    }//GEN-LAST:event_jbEmployeeSelectorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbEmployeeSelector;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }


    
    private class TransactionSavable extends AbstractSavable{
        
        TransactionSavable(){
            register();
        }
        
        AssignCodesTopComponent tc(){
            return AssignCodesTopComponent.this;
        }

        @Override
        protected String findDisplayName() {
            return "Payroll Code Assignment";
        }

        @Override
        protected void handleSave() throws IOException {
            Runnable task = new  Runnable() {
                @Override
                public void run() {
                    final ProgressHandle ph = ProgressHandleFactory.createHandle("Assigning Payroll Codes");
                    ph.start();
                    for(int i=0;i<empList.size();i++){
                        for(TblPayrollCode code : group){
                        Employees e = empList.get(i);
                        int j = i+1;
                        DataAccess.saveEmployeePayrollCode(e, code);
                        StatusDisplayer.getDefault().setStatusText("Processing For: "+j+"/"+empList.size()+" "+e.getSurName()+" "+ e.getOtherNames());
                        //ph.progress(i+"/"+empList.size()+" "+e.getSurName()+" "+e.getOtherNames());
                        }
                    }
                    ph.finish();
                    
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            
            RequestProcessor.getDefault().post(task);
            tc().close();
            
        }

        @Override
        public boolean equals(Object o) {
            if(o instanceof TransactionSavable){
                TransactionSavable e = (TransactionSavable)o;
                return tc() == e.tc();
            }
            return false;
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public int hashCode() {
            return tc().hashCode();
        }
        
    }
    
    public void modify(){
        if(!empList.isEmpty()){
            if(getLookup().lookup(TransactionSavable.class)==null){
                ic.add(new TransactionSavable());
            }else{
            StatusDisplayer.getDefault().setStatusText("Select Employees");
        }}
    } 
    

}
